// ===== МЕТОДЫ МАССИВОВ: =============================

// numbers.push(6) // добавляет эл-т в конец массива
// numbers.pop() // удаляет эл-т из конца массива
// numbers.unshift(0) // добавляет эл-т в начало массива
// numbers.shift() // удаляет эл-т из начала массив

// ---Методы - это всегда функции!!!!!!!!!!!!! поэтому в конце всегда скобки надо! -------------

// - forEach() - ничего не возвращает (undefined), выполняет указанную ф-цию один раз для каждого эл-та массива.

// - map - выполняет указанную ф-цию один раз и возвр. всегда весь массив целиком

// - "filter" возвр. новый массив, в который попадают те эл-ты, которые прошли указанную проверку, т.е. не надо никаких "иначе", "то" (без " : ") 
// Callback-функция - это функция, переданная в другую функцию в качестве аргумента
=================================================================================

// ----- ОБЪЕКТЫ --------------------------------------
// ----- способы задания объектов: ----------
const user = {
  firstname: 'Nelli',
  lastname: 'Efremyan',
  age: 28,
  active: true,
  address: {
    country: 'Armenia',
    city: 'Yerevan'
  },
  skills: ['JS', 'SQL']
}

// 1.Вывести в консчоль имя пользоватея и еще что-нибудь :

console.log(user.firstname);
console.log(user.age);
console.log(user.address);
console.log(user.skills);
// --- а можно и так: --------------
console.log(user.firstname, user.age,user.address, user.skills);

//=================================================================================

--- МЕТОД SORT --------------------------------
    .sort() - сортирует эл-ты массива, сортирует по умолчанию по первой цифре!
    Использует Callback ф-цию

    const numbers = [33, 1, 7, 3, 56]
    numbers
    console.log(numbers)   [1, 3, 7, 33, 56]

    если от меньшего к большеиу:
    .sort((a, b) => a - b)
    console.log(numbers)  [56, 33, 7, 3, 1]

    если от большего к меньшему:
    .sort((a, b) => b - a)
    console.log(numbers);

   если умляуты всякие или строки то:
    
    const names = ['Anna', 'Ivan', 'Anton', 'Pavel']
    names.sort((a, b) => a.localeCompare(b))
    console.log(names)   ['Anna', 'Anton', 'Ivan', 'Pavel']

   names.sort((a, b) => b.localeCompare(a))
   console.log(names)   ['Pavel', 'Ivan', 'Anton', 'Anna']




===============================================================
СПОСОБЫ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ (В ВЕБЕ)

(1) Текстовый
(2) Графический (изображения)
(3) Табличный
(4) Медиа-информация (видео, аудио, 2d/3d-графика)


ИЗ ЧЕГО СОСТОИТ ВЕБ-СТРАНИЦА (СТРУКТУРНО)

(0) Специальный заголовок DOCTYPE
(1) блок HEAD (мета) - входит в состав блока HTML
(2) блок BODY (тело) - входит в состав блока HTML

CTRL + /
КЛАССИФИКАЦИЯ ТЕГОВ
КЛАССИФИКАЦИЯ ТЕГОВ ПО НАЛИЧИЮ СЕМАНТИКИ

(1) Семантические теги
	p
	a
	img
	h1
	h2
	ul
	ol


(2) Не семантические теги
	div - блочный
	span - строчный


ПО ТИПЫ ОТОБРАЖЕНИЯ

(1) Строчные 
(2) Блочные

КАСКАДЫ В CSS

(1) браузерный
(2) веб-сайта
(3) пользовательский



селектор {
	свойство1: значение;
	свойство2: значение;
	...
}
СЕЛЕКТОР - выражение, которое определяет к чему применяются связанные с ним свойства

Блоковая модель

- внутренний оступ (padding) 
1 значение: для_всех_сторон_одинаково
2 значения: верх_низ лево_право
4 значения: верх право низ лево

- рамка (border)
- внешний отступ (margin)
===============================================================
каким образом возможно установить
ВНЕШНИЙ ОТСТУП для элемента:

низ - 0
верх - 10px
право - 50px
лево - 50px

Ответ - margin: 10px 50px 0 50p
=====================================================================
КАК СБРОСИТЬ ОТСТУП В ДАННОМ СЛУЧАЕ ДЛЯ ТЕЛА ДОКУМЕНТА?


селектор {	свойство: значение; }

Ответ - body { margin: 0; }
=======================================================================
КАК УСТАНОВИТЬ ДЛЯ ТЕГА div вн/оступ:
	- лево - 50px
	- право - 50px
	- верх - 100px
	- низ - 100px
	
селектор { свойство: значение; }
Ответ - div {padding: 100px 50px }
==========================================================================

ПИКТОГРАММЫ (иконки) - схематическое изображение объекта или действия
text-shadow: 8px 5px 6px lightgrey;
ТИПЫ ИЗОБРАЖЕНИЙ (ФОРМАТЫ) В ВЕБ

(1) Растровые
	- чаще - для фото
	
(2) Векторные
	- чаще - для лого
===============================================================================
20.10 Разделение на две половинки:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign In</title>
    <style>
@import url();
        * {
            margin:  0;
            padding:  0;
            box-sizing: border-box;
        }
        html,
        body,
        .wrapper {
            height:  100%;
        }
        
        body {
            font-family: 'Roboto' , sans-serif;
        }
        form {
            background-color: gold;
            width:  300px;
            height: 400px;                    
                 
          }
          .wrapper {
            display: flex;
          }
          .left,
          .right {
            flex: 1;
        }
        figure,
        img {
            height: 100%;
            width: 100%;
        }
        img {
            object-fit: cover;
        }
        figure {
            line-height: 0;
        }
        .left {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
    </style>
</head>    
</body>
    <div class="wrapper">

    <div class="left">
<form></form>
    </div>    
<div class="right">
<figure>
    <img src="http://eisenbahnmuseum-bochum.de/wp-content/uploads/2022/07/DSC_0239-7-4-1024x705.jpg" alt="">
</figure>
</div>

</div>
</html>
=========================================================================================================================
СЕМАНТИЧЕСКИЕ ТЕГИ

 - Это html-теги "с говорящим названием"
 	header, footer, nav, menu, ul, h1

	ПРИЧИНЫ ПРИМЕНЕНИЯ
	(1) SEO
	(2) Ассистивные технологии
----------------------------------------------------------------------------------
Всплывающее МЕНЮ:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JC Menu</title>

    <style>
        :root {
            --sidebar-width: 200px;
        }
       .menu {
        position: fixed;
        top: 0;
        left: 0;
        height: 100%;
        width:  var(--sidebar-width);
        background: gold;
        transform: translateX(calc(var(--sidebar-width) * -1));
        transition: all .3s ease-out;       
       }
       .menu-open {
        transform: none;
       }
       header {
        display: flex;
        justify-content: space-between;
        align-items: center;
       }
       button {
        background: blue;
        color: white;
        padding: 1rem 2rem;
        font-size: 1.5rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.5s ease-out;

       }
        button:hover {
            background: rgb(115, 223, 20);
        }
    </style>


</head>
<body>   
    <div class ="menu"></div>
    <header>
        <h1>  About Company </h1>

            <button onclick="toggleMenu()">Menu</button>                

    </header>       
        <p>
            
        </p>

        <script>
           function toggleMenu() {
            const menu = document.querySelector('.menu');
            menu.classList.toggle('menu-open');
        }
        </script>
    

</body>
</html>
----------------------------------------------------------------------------------------------------------
БЭМ: Блок__Элемент--модификатор

- Это методология (набор рекомендаций) о том, как правильно именовать
	классы (соглашение об именовании)
(1) Блок - отвечает на вопрос "что это?"
 (2) Элемент - отвечает на вопрос "что это?"
 (3) Модификатор - "какой?" или "какое состояное?"
==============================================================================================
БЛОК - самостоятельный сегмент страницы (отвечает на вопрос "что это?")
ЭЛЕМЕНТ - неотъемлемая часть блока (отвечает на вопрос "что это?")
МОДИФИКАТОР (блока или элемента) - вспомогательный "инструмент/класс" (отвечает на вопрос "какой?")

блок__элемент--модификатор
напимер:
<h1 class="title title--large">
	<span class="title__icon title__icon--red">+</span>
	<span class="title__text">HELLO</span>
</h1>
---------------------------------------------------------------------------------------
CSS Vars - что это?
	- инструмент (заимстованный из языков программирования)
	- решает вопрос повторного/многократного использования значения
--------------------------------------------------------------------------------------------
КАК ДОБАВИТЬ ИЗОБРАЖЕНИЕ НА СТРАНИЦУ
	(1) через тег IMG (для контента)
	(2) через свойство BACKGROUND (для декораций)
--------------------------------------------------------------------------------------------



