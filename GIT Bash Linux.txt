АРХИТЕКТУРА "КЛИЕНТ-СЕРВЕР"

 - Это модель взаимодействия (отношения) между сетевыми узлами, где
 	(1) Клиент (роль, активная сторона) выполняет запрос серверу
 	(2) Сервер (роль, пассивная сторона) принимает запросы от клиентов

Клиент <-> Интерфейс (FE) <-> Сервер (backend)
 	
 		- сайт/приложение (ЧЕЛОВЕК-ПРОГРАММА)
 		- api (ПРОГРАММА-ПРОГРАММА)
===========================================================================================
GIT - инструмент (программа)
	- вспомогательный инструмент любого разработчика
	
GITHUB - интернет-площадка
GITHUB Pages - хостинг стат/сайтов (html/css/js)
репозиторий (реп, repo)
	- Файловая база данных (каталог .git)

git init (создать новый репо)

$ git commit -m
error: switch `m' requires a value



ЛЕГЕНДА ДЛЯ git status -s
	M - Modified files
	D - Deleted files
	A - Added files
	?? - Untracked files

СОХРАНЕНИЕ (КОММИТ) ВЫПОЛНЯЕТСЯ В ДВА ЭТАПА
	(1) Добавить в очередь на коммит (git add) - a.k.a. INDEX
	(2) Выполнить сохранение (git commit)
	
БАЗОВЫЙ ПОДЯДОК РАБОТЫ НАД ПРОЕКТОМ С ПОМОЩЬЮ GIT
	(1) Внести правки по проекту
	(2) Проиндексировать правки (git add .)
	(3) Сохранить/закоммитить (git commit -m 'описание правок')
        (4) ЗАПУШИТЬ git push 
ПРОСМОТР ЖУРНАЛА КОММИТОВ
git log
ПОСМОТРЕТЬ ПРАВКИ:
git show
git show commit_id (посмотреть изменения в коммите)
ВЫГРУЗКА файла на github:
git push -u origin master

(!) ВСЕ ИЗМЕНЕНИЯ ПО ПРОЕКТУ ДЕЛАТЬ ТОЛЬКО ЛОКАЛЬНО

=========================================================================================
vim редавктор:
i - напимать
esc - выйти из режима записи
h - лево
j - вниз
k - вверх
l - вправо
0 - переход в начало строки
$ - переход в конец строки
w - слово вперед
b - слово назад
dw - удалить слово
u - undo
dd - удалить строку
cw (change word) - удалить слово и перейти в режим ввода
df. - удалить все до ближ.точки
S (substitute) - заменить строку (удаление и переход в режим ввода)
D - удалить от тек. пол. курсора до конца строки
C - удалить до конца строки и перейти в реж. ввода
:wq - запись и выход из редакт. файла (если файл был указан)
ЕСЛИ НЕ УКАЗАН
:w новый_файл.txt
:q
:q! выход без сохранения
---------------------------------------------------------------------------
ОБЩИЙ ПОДХОД К СОЗДАНИЮ МОБ.ВЕРСИИ САЙТА
(при условии, что уже есть десктопная)

	(1) Выяснить, как будет выглядить моб/версия
		(на выходе должно быть полное представление о рез-те)
		
	(2) Создать отдельную секцию в CSS-коде веб-сайта
		(media queries - @media)
		
	(3) Последовательно меняем/готовим каждый элемент страницы
-----------------------------------------------------------------------------
ПОРЯДОК РАБОТЫ С GIT/GITHUB

	(1) Внести правки в проект
	(2) git add . (проиндексировать все)
	(3) git commit -m 'какое-то описание'
	(4) git push
===============================================================================
РЕАЛЬНЫЕ СЦЕНАРИИ СКРИПТОВ

	(1) Создание резервных копий ("бекапов")
	(2) Продление SSL-сертификатов
	(3) Сбор аналитики о сервере
================================================================================
ПОРЯДОК РАБОТЫ С GIT / GITHUB

(1) Создать проект и внести в его файлы необх. изменения

(2) Создать репозиторий (если он еще не создан)
	git init
	
(3) Добавить в очередь на коммит (проиндексировать) все файлы проекта
	git add .

(4) Выполнить сохранение (коммит)
	git commit -m 'Описание коммита'

(5) Сделать привязку локального репо к удален. (если ее нет)
	git remote add origin  ссылка_на_реп

(6) Выгрузить на GitHub
	
 (первый раз)
	git push (в последующем)
=================================================================
git rm --cached название файла
	(удалить файл из репо, но оставить локально)
КАК УДАЛИТЬ ФАЙЛ ВЕЗДЕ
git rm имя_файла
=============================================================================




















