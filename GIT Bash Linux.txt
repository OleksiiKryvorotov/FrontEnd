АРХИТЕКТУРА "КЛИЕНТ-СЕРВЕР"

 - Это модель взаимодействия (отношения) между сетевыми узлами, где
 	(1) Клиент (роль, активная сторона) выполняет запрос серверу
 	(2) Сервер (роль, пассивная сторона) принимает запросы от клиентов

Клиент <-> Интерфейс (FE) <-> Сервер (backend)
 	
 		- сайт/приложение (ЧЕЛОВЕК-ПРОГРАММА)
 		- api (ПРОГРАММА-ПРОГРАММА)
===========================================================================================
GIT - инструмент (программа)
	- вспомогательный инструмент любого разработчика
	
GITHUB - интернет-площадка
GITHUB Pages - хостинг стат/сайтов (html/css/js)
репозиторий (реп, repo)
	- Файловая база данных (каталог .git)

git init (создать новый репо)

$ git commit -m
error: switch `m' requires a value



ЛЕГЕНДА ДЛЯ git status -s
	M - Modified files
	D - Deleted files
	A - Added files
	?? - Untracked files

СОХРАНЕНИЕ (КОММИТ) ВЫПОЛНЯЕТСЯ В ДВА ЭТАПА
	(1) Добавить в очередь на коммит (git add) - a.k.a. INDEX
	(2) Выполнить сохранение (git commit)
	
БАЗОВЫЙ ПОДЯДОК РАБОТЫ НАД ПРОЕКТОМ С ПОМОЩЬЮ GIT
	(1) Внести правки по проекту
	(2) Проиндексировать правки (git add .)
	(3) Сохранить/закоммитить (git commit -m 'описание правок')
        (4) ЗАПУШИТЬ git push 
ПРОСМОТР ЖУРНАЛА КОММИТОВ
git log
ПОСМОТРЕТЬ ПРАВКИ:
git show
git show commit_id (посмотреть изменения в коммите)
ВЫГРУЗКА файла на github:
git push -u origin master

(!) ВСЕ ИЗМЕНЕНИЯ ПО ПРОЕКТУ ДЕЛАТЬ ТОЛЬКО ЛОКАЛЬНО

=========================================================================================
vim редавктор:
i - напимать
esc - выйти из режима записи
h - лево
j - вниз
k - вверх
l - вправо
0 - переход в начало строки
$ - переход в конец строки
w - слово вперед
b - слово назад
dw - удалить слово
u - undo
dd - удалить строку
cw (change word) - удалить слово и перейти в режим ввода
df. - удалить все до ближ.точки
S (substitute) - заменить строку (удаление и переход в режим ввода)
D - удалить от тек. пол. курсора до конца строки
C - удалить до конца строки и перейти в реж. ввода
:wq - запись и выход из редакт. файла (если файл был указан)
ЕСЛИ НЕ УКАЗАН
:w новый_файл.txt
:q
:q! выход без сохранения
---------------------------------------------------------------------------
ОБЩИЙ ПОДХОД К СОЗДАНИЮ МОБ.ВЕРСИИ САЙТА
(при условии, что уже есть десктопная)

	(1) Выяснить, как будет выглядить моб/версия
		(на выходе должно быть полное представление о рез-те)
		
	(2) Создать отдельную секцию в CSS-коде веб-сайта
		(media queries - @media)
		
	(3) Последовательно меняем/готовим каждый элемент страницы
-----------------------------------------------------------------------------
ПОРЯДОК РАБОТЫ С GIT/GITHUB

	(1) Внести правки в проект
	(2) git add . (проиндексировать все)
	(3) git commit -m 'какое-то описание'
	(4) git push
===============================================================================
РЕАЛЬНЫЕ СЦЕНАРИИ СКРИПТОВ

	(1) Создание резервных копий ("бекапов")
	(2) Продление SSL-сертификатов
	(3) Сбор аналитики о сервере
================================================================================
ПОРЯДОК РАБОТЫ С GIT / GITHUB
1 вариант:
(1) Создать проект и внести в его файлы необх. изменения

(2) Создать репозиторий (если он еще не создан)
	git init
	
(3) Добавить в очередь на коммит (проиндексировать) все файлы проекта
	git add .

(4) Выполнить сохранение (коммит)
	git commit -m 'какое-то описание'

(5) Сделать привязку локального репо к удален. (если ее нет)
	git remote add origin  ссылка_на_реп
Удалить привязку лок. реп. к дист. реп
        git remote rm origin

(6) Выгрузить на GitHub
	
 (первый раз)
	git push (в последующем)
2 вариант:
БАЗОВЫЙ ПОРЯДОК РАБОТЫ ПО ПРОЕКТУ С GIT/GITHUB

	(1) Вношу изменения в проект
	
		(1.1) Посмтреть разницу между раб/каталогом и индексом
				git diff
	
	(2) Проиндексировать
		git add .
		
	(3) Сохранение
		git commit -m 'описание изменений'
	
	(4) Выгрузить на github
		git push
		(git push -u origin master)
==========================================================================
- Как добавить привязку лок/реп к дист/реп
		git remote add origin ссылка
	
	- Как удалить привязку лок/реп к дист/репо
		git remote rm origin
	
	- Как перезаписать последний коммит
		git commit --amend -m 'описание'
		(НЕ РЕКОМЕНДУЕТСЯ ДЛЯ ПУБЛИЧНЫХ КОММИТОВ)
	
	- Как переименовать текущую ветку?
		git branch -m новая_ветка
	
	- Как удалить дист/ветку (на GH)
		git push origin --delete develop
	
	- Как переменовать дистанц/ветку (на GH)
		git push origin --delete старая_ветка
		git push -u origin новая_ветка

=============================================================================
git init (создает новый реп)
git add (добавить в очередь на коммит)
git reset (очистить индекс/очередь на коммит)
git commit (сохранить/зафиксировать изменение)
git remote (взаимодействие с GH)
git push (выгружить коммиты на GH)
git show (посмотреть коммит)
git rm (удаление файлов)
git status (показывает состояние раб/каталога)
git show commit_id (посмотреть изменения в коммите)
ЭЛЕМЕНТАРНЫЕ ВАРИАНТЫ РАБОТЫ С git diff
git rm --cached название файла
	(удалить файл из репо, но оставить локально)
КАК УДАЛИТЬ ФАЙЛ ВЕЗДЕ
git rm имя_файла
git diff (посмотреть разницу)
	(1) Посмотреть разницу между раб/каталогом и индексом
		git diff
	
	(2) Посмотреть разницу между индексом и посл/коммитом
		git diff --staged/--cached
		
	(3) Посмотреть разницу между раб/каталогом и посл/коммитом
		git diff HEAD
УДАЛИТЬ ВСЕ РАПОЗИТОРИИ:
find . -type d -name ".git" -exec rm -rf {} \;
Перезаписать последний коммит:
git commit --amend -m 'описание' - не рекомнд для публичных коммитов
=============================================================================
ВЕТВЛЕНИЕ В GIT

	Ветвь - изолированный поток разработки (еще одна версия проекта)
	

	git branch (посмотреть список веток)
		-v (подробный вывод)
	
	git branch новая_ветка (создать ветку)
	
	git checkout ветка (переключиться на ветку)
	
	git branch -m новая_ветка (переименовать текущую ветку в новую)
	
	git checkout -b новая_ветка (создать и переключиться на новую ветку)

        git push origin --delete 'ветка' (удалить ветку на GH)
        git push -u origin 'новая_ветка' (сздать новую ветку) 


=============================================================================
ИСПРАВЛЕНИЕ ОШИБОК В GIT HUB!!!!!!!!!!!!!!!!!!!
MimRoda@DESKTOP-SIPJP96 MINGW64 /d/IT курсы/Frontend (master)
------------
$ git status
------------
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)     

nothing to commit, working tree clean

MimRoda@DESKTOP-SIPJP96 MINGW64 /d/IT курсы/Frontend (master)
------------
$ git log
------------
commit 7060eaf645417f645a34262eb145a2d54fd880b4 (HEAD -> master)
Author: alexykr alexykr <sumskaqqq@gmail.comgit config --global user.name Oleksii>
Date:   Thu Nov 10 17:02:37 2022 +0100

    update

commit 09aa42ed5aff6666be860eebc17c25203f869796
Author: alexykr alexykr <sumskaqqq@gmail.comgit config --global user.name Oleksii>
Date:   Thu Nov 10 11:41:21 2022 +0100

    CW

commit 4f67ebbede1a32edfcc40c0e48ec37d8033543e2 (origin/master)
Author: alexykr alexykr <sumskaqqq@gmail.comgit config --global user.name Oleksii>
Date:   Thu Nov 10 09:49:38 2022 +0100


MimRoda@DESKTOP-SIPJP96 MINGW64 /d/IT курсы/Frontend (master)
---------------------------
$ git pull origin master
---------------------------
remote: Enumerating objects: 41, done.
remote: Counting objects: 100% (41/41), done.
remote: Compressing objects: 100% (26/26), done.
remote: Total 41 (delta 17), reused 34 (delta 14), pack-reused 0
Unpacking objects: 100% (41/41), 9.79 KiB | 3.00 KiB/s, done.
From github.com:OleksiiKryvorotov/FrontEnd
 * branch            master     -> FETCH_HEAD
   4f67ebb..3b8c57b  master     -> origin/master
Auto-merging Classwork/November2022/Lesson10_11.html
CONFLICT (add/add): Merge conflict in Classwork/November2022/Lesson10_11.html
Auto-merging Classwork/November2022/Lesson10_11_2.html
CONFLICT (add/add): Merge conflict in Classwork/November2022/Lesson10_11_2.html
Auto-merging Classwork/November2022/Lesson10_11_3.html
CONFLICT (add/add): Merge conflict in Classwork/November2022/Lesson10_11_3.html
Automatic merge failed; fix conflicts and then commit the result.

MimRoda@DESKTOP-SIPJP96 MINGW64 /d/IT курсы/Frontend (master|MERGING)
----------------
$ git add .
---------------

MimRoda@DESKTOP-SIPJP96 MINGW64 /d/IT курсы/Frontend (master|MERGING)
-----------------------
$ git commit -m 'resul'
-----------------------
[master a876f6b] resul

MimRoda@DESKTOP-SIPJP96 MINGW64 /d/IT курсы/Frontend (master)
-----------
$ git push
----------
Enumerating objects: 44, done.
Counting objects: 100% (40/40), done.
Delta compression using up to 16 threads
Compressing objects: 100% (25/25), done.
Writing objects: 100% (25/25), 4.13 KiB | 2.06 MiB/s, done.
Total 25 (delta 16), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (16/16), completed with 8 local objects.
To github.com:OleksiiKryvorotov/FrontEnd.git
   3b8c57b..a876f6b  master -> master
=======================================================================================================






















